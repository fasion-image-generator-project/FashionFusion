import React, { useState, useCallback } from 'react';
import styled from 'styled-components';
import { INITIAL_MODEL_OPTIONS, FINAL_MODEL_OPTIONS } from '../../constants/models';
import { USE_DUMMY_DATA, DUMMY_IMAGES } from '../../constants/dummyData';
import useStyleGanParams from '../../hooks/useStyleGanParams';
import useHistory from '../../hooks/useHistory';
import ModelSelect from './ModelSelect';
import StyleControls from './StyleControls';
import ImageDisplay from './ImageDisplay';
import PromptInput from './PromptInput';

const Container = styled.div`
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
`;

const MainContent = styled.div`
  display: grid;
  gap: 20px;
  grid-template-columns: 1fr;
  
  @media (min-width: 1024px) {
    grid-template-columns: 2fr 1fr;
  }
`;

const ContentArea = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const ImageControlArea = styled.div`
  display: flex;
  flex-direction: column;
  gap: 20px;
`;

const ErrorMessage = styled.div`
  color: ${props => props.theme.danger};
  padding: 12px;
  border-radius: 8px;
  background-color: ${props => props.theme.danger}20;
  margin-bottom: 20px;
  animation: fadeIn 0.3s ease;
`;

const ImageGenerator = () => {
    // State management
    const [prompt, setPrompt] = useState('');
    const [initialModel, setInitialModel] = useState(INITIAL_MODEL_OPTIONS[0].id);
    const [finalModel, setFinalModel] = useState(FINAL_MODEL_OPTIONS[0].id);
    const [initialImage, setInitialImage] = useState(null);
    const [finalImage, setFinalImage] = useState(null);
    const [loading, setLoading] = useState(false);
    const [error, setError] = useState(null);

    // Custom hooks
    const {
        params,
        activePreset,
        customPresets,
        handleParamChange,
        handlePresetClick,
        handleSavePreset
    } = useStyleGanParams();

    const { addHistoryItem } = useHistory();

    // Handlers
    const handlePromptSubmit = useCallback(async (e) => {
        e.preventDefault();
        if (!prompt) return;

        setLoading(true);
        setError(null);

        try {
            // 실제 API 호출 대신 더미 데이터 사용
            if (USE_DUMMY_DATA) {
                await new Promise(resolve => setTimeout(resolve, 1500)); // 로딩 시뮬레이션
                setInitialImage(DUMMY_IMAGES[initialModel].INITIAL);
                setFinalImage(DUMMY_IMAGES[finalModel].FINAL);

                // 히스토리에 추가
                addHistoryItem({
                    prompt,
                    initialModel,
                    finalModel,
                    initialImage: DUMMY_IMAGES[initialModel].INITIAL,
                    finalImage: DUMMY_IMAGES[finalModel].FINAL,
                    params
                });
            } else {
                // TODO: 실제 API 호출 구현
                throw new Error('API is not implemented yet');
            }
        } catch (err) {
            setError(err.message);
        } finally {
            setLoading(false);
        }
    }, [prompt, initialModel, finalModel, params, addHistoryItem]);

    return (
        <Container>
            <PromptInput
                prompt={prompt}
                onPromptChange={setPrompt}
                onSubmit={handlePromptSubmit}
                disabled={loading}
            />

            {error && <ErrorMessage>{error}</ErrorMessage>}

            <MainContent>
                <ContentArea>
                    <ModelSelect
                        options={INITIAL_MODEL_OPTIONS}
                        selectedModel={initialModel}
                        onModelChange={setInitialModel}
                        title="초기 이미지 생성 모델 선택"
                    />
                    <ImageDisplay
                        imageUrl={initialImage}
                        alt={`Generated by ${initialModel}`}
                        loading={loading}
                    />

                    <ModelSelect
                        options={FINAL_MODEL_OPTIONS}
                        selectedModel={finalModel}
                        onModelChange={setFinalModel}
                        title="스타일 변환 모델 선택"
                    />
                    <ImageDisplay
                        imageUrl={finalImage}
                        alt={`Transformed by ${finalModel}`}
                        loading={loading}
                    />
                </ContentArea>

                <ImageControlArea>
                    <StyleControls
                        params={params}
                        onParamChange={handleParamChange}
                        customPresets={customPresets}
                        activePreset={activePreset}
                        onPresetClick={handlePresetClick}
                        onSavePreset={handleSavePreset}
                    />
                </ImageControlArea>
            </MainContent>
        </Container>
    );
};

export default ImageGenerator; 